From 39cc985948d71d9b271300f888e69201e8de2585 Mon Sep 17 00:00:00 2001
From: Patralekha Bhattacharjee <bhattacharjeepatralekha@gmail.com>
Date: Thu, 30 Apr 2020 13:14:37 -0400
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 26 +++++++++++++++++++++++---
 src/Graph.tsx | 18 ++++++++++++++++--
 2 files changed, 39 insertions(+), 5 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..f032a32 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,36 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    //rendering graph on user-click
+    if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+   }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
+
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x=0;
+    //setting interval
+    const interval= setInterval(()=>{
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph:true,
+        });
+    });
+    x++;
+    if(x> 1000){
+      clearInterval(interval);
+    }
+  },100);
+  //  DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+  //    this.setState({ data: [...this.state.data, ...serverResponds] });
+  //  });
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..285cf92 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,8 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+ //enable the `PerspectiveViewerElement` to behave like an HTMLElement
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +33,8 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    //const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem= document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +51,18 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      //other attributes to the element
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates',`
+      {
+        "stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"
+      }`);
     }
   }
 
-- 
2.16.3

